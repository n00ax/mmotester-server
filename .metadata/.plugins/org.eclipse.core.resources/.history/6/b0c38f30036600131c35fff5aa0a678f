package mmotest.mem;

import java.net.UnknownHostException;
import java.util.Vector;

import mmotest.constants.Constants;
import mmotest.io.PrintOUT;
import mmotest.player.FASTUpdate;
import mmotest.player.Player;
import mmotest.thread.ThreadTerminator;

import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.MongoClient;
import com.mongodb.DBObject;
import com.mongodb.DBCollection;
public class GlobalMemory {
	private MongoClient primary_client;
	private DB UsrDB;
	private DB StateDB;
	private DB WorldDB;
	public GlobalMemory(){
		try {
			primary_client = new MongoClient(Constants.DBASE_IP,Constants.DBASE_PORT);
			UsrDB = primary_client.getDB(Constants.UsrDBSName);
			StateDB = primary_client.getDB(Constants.StateDBSName);
			WorldDB = primary_client.getDB((Constants.WorldDBSName));
			boolean isAuthUsr = UsrDB.authenticate(Constants.UsrDBSName, Constants.UsrDBPasswd.toCharArray());
			if(isAuthUsr==true){
				PrintOUT.println("USER::DATABASE **SUCESSFUL** :: THREAD="+Thread.currentThread().getId());
			}
			else{
				PrintOUT.println("USER::DATABASE **UNSUCESSFUL** :: THREAD="+Thread.currentThread().getId());
				new ThreadTerminator("Server Build Or Immutable Memory Error, Could Not Login Into DB,USR");
			}
			boolean isAuthState = StateDB.authenticate(Constants.StateDBSName, Constants.StateDBPasswd.toCharArray());
			if(isAuthState==true){
				PrintOUT.println("USER::DATABASE **SUCESSFUL** :: THREAD="+Thread.currentThread().getId());
			}
			else{
				PrintOUT.println("USER::DATABASE **UNSUCESSFUL** :: THREAD="+Thread.currentThread().getId());
				new ThreadTerminator("Server Build Or Immutable Memory Error, Could Not Login Into DB,USR");
			}
			if(isAuthState==true){
				PrintOUT.println("USER::DATABASE **SUCESSFUL** :: THREAD="+Thread.currentThread().getId());
			}
			else{
				PrintOUT.println("USER::DATABASE **UNSUCESSFUL** :: THREAD="+Thread.currentThread().getId());
				new ThreadTerminator("Server Build Or Immutable Memory Error, Could Not Login Into DB,USR");
			}
		} catch (UnknownHostException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	public void GetInitPlayer(){
		
	}
	public Vector<Player> LoadPlayersInBlock(){ //Gives Request Vector(**NOT EQUALIZED**)
		
	}
	public void UpdatePlayerFAST(FASTUpdate plobj){
		DBCollection t_collect = StateDB.getCollection(plobj.toString());
		DBObject finder = new BasicDBObject();
		finder.put("plid",new Integer(plobj.Plid).toString());
		DBObject setter = new BasicDBObject();
		setter.put("$set x_coord", new Double(plobj.X).toString());
		t_collect.findAndModify(finder, setter);
		
	}
}
